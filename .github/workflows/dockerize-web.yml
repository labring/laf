name: dockerize-web

on:
  workflow_dispatch:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
    paths:
      - "web/**"
      - ".github/workflows/dockerize-web.yml"
      - "!**/*.md"
      - "!web/package-lock.json"
  push:
    branches:
      - main
    paths:
      - "web/**"
      - ".github/workflows/dockerize-web.yml"
      - "!**/*.md"
      - "!web/package-lock.json"

# permissions:
#   pull-requests: write
#   packages: write
#   contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dockerize-web:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: web/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('web/package-lock.json') }}

      - name: Use Node
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install Package
        working-directory: web
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build web
        working-directory: web
        env:
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          VITE_GITHUB_SHA: ${{ github.sha }}
        run: npm run build

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        if: ${{ !github.event.repository.fork }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          sourcemaps: dist/assets
          url_prefix: "~/assets/"
          version: ${{ format('laf@{0}', github.sha) }}
          working_directory: web
          ignore_missing: true
          ignore_empty: true

      - run: |
          rm -rf web/dist/assets/*.map

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/laf-web
            docker.io/${{ secrets.DOCKER_USERNAME }}/laf-web
          # https://github.com/docker/metadata-action#typesemver
          tags: |
            type=ref,event=pr
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') && github.event_name != 'pull_request' }}
            type=sha,format=short,enable=${{ github.ref == format('refs/heads/{0}', 'main') && github.event_name != 'pull_request' }}
            type=raw,value={{branch}}-{{sha}},enable=${{ github.ref != format('refs/heads/{0}', 'main') && !startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Github Container Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: docker-build
        uses: docker/build-push-action@v3
        with:
          context: ./web
          file: ./web/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64, linux/arm64

      - name: Comment docker image tags to PR
        if: github.event_name == 'pull_request'
        uses: mshick/add-pr-comment@v2
        with:
          message-id: "dockerize-web"
          message: |
            **:boom: laf web built successfully for pr ${{ github.event.pull_request.number }}**
            ```
            Docker image built (not pushed in PR)
            ```

  trigger-workflow-build-cluster-image:
    needs: [dockerize-web]
    runs-on: ubuntu-latest
    if: github.ref == format('refs/heads/{0}', 'main') && github.event_name != 'pull_request'
    steps:
      - name: trigger cluster image workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          event-type: docker_build_success
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "version": "latest"}'
