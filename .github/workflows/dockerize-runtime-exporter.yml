name: dockerize-runtime-exporter

on:
  workflow_dispatch:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
    paths:
      - "services/runtime-exporter/**"
      - ".github/workflows/dockerize-runtime-exporter.yml"
      - "!**/*.md"
      - "!services/runtime-exporter/package-lock.json"
  push:
    branches: [main]
    paths:
      - "services/runtime-exporter/**"
      - ".github/workflows/dockerize-runtime-exporter.yml"
      - "!**/*.md"
      - "!services/runtime-exporter/package-lock.json"
permissions:
  contents: read
  packages: write

concurrency:
  group: dockerize-runtime-exporter-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dockerize-runtime-exporter:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: services/runtime-exporter/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('services/runtime-exporter/package-lock.json') }}

      - name: Use Node
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install Package
        working-directory: services/runtime-exporter
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build runtime-exporter
        working-directory: services/runtime-exporter
        run: npm run build

      - name: Docker meta (for push events only)
        id: meta
        if: github.event_name != 'pull_request'
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/laf-runtime-exporter
            docker.io/${{ secrets.DOCKER_USERNAME }}/laf-runtime-exporter
          # https://github.com/docker/metadata-action#typesemver
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=sha,format=short,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value={{branch}}-{{sha}},enable=${{ github.ref != format('refs/heads/{0}', 'main') && !startsWith(github.ref, 'refs/tags/') }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Github Container Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: docker-build
        uses: docker/build-push-action@v3
        with:
          context: ./services/runtime-exporter
          file: ./services/runtime-exporter/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ github.event_name != 'pull_request' && steps.meta.outputs.tags || 'laf-runtime-exporter:pr-build' }}
          labels: ${{ github.event_name != 'pull_request' && steps.meta.outputs.labels || '' }}
          platforms: linux/amd64, linux/arm64

      - name: PR build summary
        if: github.event_name == 'pull_request'
        run: |
          echo "‚úÖ Docker image built successfully for PR #${{ github.event.pull_request.number }}"
          echo "‚ÑπÔ∏è  Image not pushed to registry (security measure)"
          echo "üìã Build completed at $(date)"

  trigger-workflow-build-cluster-image:
    needs: [dockerize-runtime-exporter]
    if: github.ref == format('refs/heads/{0}', 'main') && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: trigger cluster image workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          event-type: docker_build_success
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "version": "latest"}'
